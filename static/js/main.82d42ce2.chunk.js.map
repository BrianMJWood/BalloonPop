{"version":3,"sources":["components/Balloon.js","components/Score.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Balloon","props","useState","balloonHeight","setBalloonHeight","balloonWidth","setBalloonWidth","popped","setPopped","popValue","setPopValue","className","onClick","Math","random","updateParent","style","height","width","display","Score","score","highScore","Timer","React","countDown","setCountDown","runTimer","setRunTimer","useEffect","timerId","setInterval","clearInterval","toggleTimer","seconds","String","padStart","minutes","floor","type","timerRunning","App","setScore","setHighScore","setTimerRunning","bonusWindow","setBonusWindow","balloonPopped","setTimeout","running","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82d42ce2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport './BalloonStyle.css';\r\n\r\nconst Balloon = (props) => {\r\n\r\n    const [balloonHeight, setBalloonHeight] = useState(145);\r\n    const [balloonWidth, setBalloonWidth] = useState(120);\r\n    const [popped, setPopped] = useState(false);\r\n    const [popValue, setPopValue] = useState(0.1)\r\n\r\n    const inflateBalloon = () => {\r\n\r\n        setBalloonHeight(balloonHeight + 25);\r\n        setBalloonWidth(balloonWidth + 25);\r\n        setPopValue(Math.random() + popValue + 0.1);\r\n\r\n        if (popValue > 1) {\r\n            setPopped(true);\r\n            props.updateParent();\r\n        }\r\n\r\n    }\r\n    return <div className=\"balloon\" onClick={inflateBalloon} style={{height: balloonHeight + \"px\", width: balloonWidth + \"px\", display: popped ? \"none\" : \"auto\"}}></div>\r\n}\r\n\r\n\r\nexport default Balloon;","import React from \"react\";\r\n\r\nconst Score = ( {score, highScore} ) => {\r\n\r\n    return <>Current score: {score} || High score: {highScore}</>\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\n\r\nconst Timer = (props) => {\r\n\r\n    const [countDown, setCountDown] = React.useState(0);\r\n    const [runTimer, setRunTimer] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n    let timerId;\r\n\r\n    if (runTimer) {\r\n      setCountDown(5);\r\n      timerId = setInterval(() => {\r\n        setCountDown((countDown) => countDown - 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(timerId);\r\n    }\r\n\r\n    return () => clearInterval(timerId);\r\n    }, [runTimer]);\r\n\r\n    React.useEffect(() => {\r\n        if (countDown < 0 && runTimer) {\r\n        setRunTimer(false);\r\n        setCountDown(0);\r\n        props.toggleTimer(false);\r\n        } else if (countDown > 0 && runTimer) {\r\n            props.toggleTimer(true);\r\n        }\r\n    }, [countDown, runTimer]);\r\n\r\n  const togglerTimer = () => setRunTimer((timerRunning) => !timerRunning);\r\n\r\n  const seconds = String(countDown % 60).padStart(2, 0);\r\n  const minutes = String(Math.floor(countDown / 60)).padStart(2, 0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        Time: {minutes}:{seconds}\r\n      </div>\r\n        {!runTimer ?      <button type=\"button\" onClick={togglerTimer}>\r\n        {runTimer ? \"Stop\" : \"Start\"}\r\n      </button> : null}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import { useState } from 'react';\n\nimport Balloon from './components/Balloon';\nimport Score from './components/Score';\nimport Timer from './components/Timer';\n\nfunction App() {\n\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const [bonusWindow, setBonusWindow] = useState(false);\n\n  const balloonPopped = () => {\n    setBonusWindow(true);\n    setTimeout(function() {\n      setBonusWindow(false);\n    }, 700);\n    \n    setScore(score === 0 ? 10 : bonusWindow ? score + 25 : score + 10);\n  }\n\n  const toggleTimer = (running) => {\n    setTimerRunning(running);\n\n    if (!running) {\n      if (score > highScore) {\n        setHighScore(score);\n      }\n\n      setScore(0);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Score score={score} highScore={highScore} />\n      <Timer toggleTimer={toggleTimer} />\n      {timerRunning ?       \n        <div className=\"balloon-holder\">\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n          <Balloon updateParent={balloonPopped} />\n        </div>\n      : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}